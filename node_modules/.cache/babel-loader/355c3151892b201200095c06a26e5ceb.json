{"ast":null,"code":"var _jsxFileName = \"/home/jyoti/practo/src/components/practoData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst divStyle = {\n  color: 'blue',\n  height: '250px',\n  textAlign: 'center',\n  padding: '5px 10px',\n  background: '#eee',\n  marginTop: '15px'\n};\nconst containerStyle = {\n  maxWidth: '1280px',\n  margin: '0 auto'\n};\n\nconst InfiniteScroll = () => {\n  _s();\n\n  const [postList, setPostList] = useState({\n    list: [1, 2, 3, 4]\n  }); // tracking on which page we currently are\n\n  const [page, setPage] = useState(1); // add loader refrence \n\n  const loader = useRef(null);\n  useEffect(() => {\n    var options = {\n      root: null,\n      rootMargin: \"20px\",\n      threshold: 1.0\n    }; // initialize IntersectionObserver\n    // and attaching to Load More div\n\n    const observer = new IntersectionObserver(handleObserver, options);\n\n    if (loader.current) {\n      observer.observe(loader.current);\n    }\n  }, []);\n  useEffect(() => {\n    // here we simulate adding new posts to List\n    const newList = postList.list.concat([1, 1, 1, 1]);\n    setPostList({\n      list: newList\n    });\n  }, [page]); // here we handle what happens when user scrolls to Load More div\n  // in this case we just update page variable\n\n  const handleObserver = entities => {\n    const target = entities[0];\n\n    if (target.isIntersecting) {\n      setPage(page => page + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: containerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: [postList.list.map((post, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          style: divStyle,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" \", post, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        ref: loader,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Load More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 13\n  }, this);\n};\n\n_s(InfiniteScroll, \"a50PJp3ty1IIlVgs+N6if048RFo=\");\n\n_c = InfiniteScroll;\nexport default InfiniteScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteScroll\");","map":{"version":3,"sources":["/home/jyoti/practo/src/components/practoData.js"],"names":["React","useEffect","useState","useRef","divStyle","color","height","textAlign","padding","background","marginTop","containerStyle","maxWidth","margin","InfiniteScroll","postList","setPostList","list","page","setPage","loader","options","root","rootMargin","threshold","observer","IntersectionObserver","handleObserver","current","observe","newList","concat","entities","target","isIntersecting","map","post","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAoD,OAApD;;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,MADM;AAEbC,EAAAA,MAAM,EAAE,OAFK;AAGbC,EAAAA,SAAS,EAAE,QAHE;AAIbC,EAAAA,OAAO,EAAE,UAJI;AAKbC,EAAAA,UAAU,EAAE,MALC;AAMbC,EAAAA,SAAS,EAAE;AANE,CAAjB;AAUA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,QAAQ,EAAE,QADS;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAAvB;;AAIA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC;AACrCe,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP;AAD+B,GAAD,CAAxC,CADyB,CAIzB;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,CAAD,CAAhC,CALyB,CAMzB;;AACA,QAAMkB,MAAM,GAAGjB,MAAM,CAAC,IAAD,CAArB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACX,QAAIoB,OAAO,GAAG;AACXC,MAAAA,IAAI,EAAE,IADK;AAEXC,MAAAA,UAAU,EAAE,MAFD;AAGXC,MAAAA,SAAS,EAAE;AAHA,KAAd,CADW,CAMZ;AACA;;AACC,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,cAAzB,EAAyCN,OAAzC,CAAjB;;AACA,QAAID,MAAM,CAACQ,OAAX,EAAoB;AACjBH,MAAAA,QAAQ,CAACI,OAAT,CAAiBT,MAAM,CAACQ,OAAxB;AACF;AAEL,GAbQ,EAaN,EAbM,CAAT;AAgBA3B,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAM6B,OAAO,GAAGf,QAAQ,CAACE,IAAT,CAAcc,MAAd,CAAqB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAArB,CAAhB;AACAf,IAAAA,WAAW,CAAC;AACRC,MAAAA,IAAI,EAAEa;AADE,KAAD,CAAX;AAGH,GANQ,EAMN,CAACZ,IAAD,CANM,CAAT,CAzByB,CAiCzB;AACD;;AACC,QAAMS,cAAc,GAAIK,QAAD,IAAc;AACjC,UAAMC,MAAM,GAAGD,QAAQ,CAAC,CAAD,CAAvB;;AACA,QAAIC,MAAM,CAACC,cAAX,EAA2B;AACvBf,MAAAA,OAAO,CAAED,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACH;AACJ,GALD;;AAQA,sBAAQ;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,KAAK,EAAEP,cAAlC;AAAA,2BACJ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBAEQI,QAAQ,CAACE,IAAT,CAAckB,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/B,4BAAQ;AAAiB,UAAA,SAAS,EAAC,MAA3B;AAAkC,UAAA,KAAK,EAAEjC,QAAzC;AAAA,iCACJ;AAAA,4BAAMgC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AADI,WAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,gBAAR;AAGH,OAJD,CAFR,eAQI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAyB,QAAA,GAAG,EAAEjB,MAA9B;AAAA,+BACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,UAAR;AAcH,CAzDD;;GAAMN,c;;KAAAA,c;AA2DN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState, useRef  } from 'react';\n\nconst divStyle = {\n    color: 'blue',\n    height: '250px',\n    textAlign: 'center',\n    padding: '5px 10px',\n    background: '#eee',\n    marginTop: '15px'\n};\n\n\nconst containerStyle = {\n    maxWidth: '1280px',\n    margin: '0 auto',\n}\nconst InfiniteScroll = () => {\n    const [postList, setPostList] = useState({\n        list: [1,2,3,4]\n    }); \n    // tracking on which page we currently are\n    const [page, setPage] = useState(1);\n    // add loader refrence \n    const loader = useRef(null);\n\n    useEffect(() => {\n         var options = {\n            root: null,\n            rootMargin: \"20px\",\n            threshold: 1.0\n         };\n        // initialize IntersectionObserver\n        // and attaching to Load More div\n         const observer = new IntersectionObserver(handleObserver, options);\n         if (loader.current) {\n            observer.observe(loader.current)\n         }\n\n    }, []);\n\n\n    useEffect(() => {\n        // here we simulate adding new posts to List\n        const newList = postList.list.concat([1,1,1,1]);\n        setPostList({\n            list: newList\n        })\n    }, [page])\n\n    // here we handle what happens when user scrolls to Load More div\n   // in this case we just update page variable\n    const handleObserver = (entities) => {\n        const target = entities[0];\n        if (target.isIntersecting) {   \n            setPage((page) => page + 1)\n        }\n    }\n\n\n    return (<div className=\"container\" style={containerStyle}>\n        <div className=\"post-list\">\n            {\n                postList.list.map((post, index) => {\n                    return (<div key={index} className=\"post\" style={divStyle}>\n                        <h2> {post } </h2>\n                    </div>)\n                })\n            }\n            <div className=\"loading\" ref={loader}>\n                    <h2>Load More</h2>\n           </div>\n        </div>\n    </div>)\n}\n\nexport default InfiniteScroll;"]},"metadata":{},"sourceType":"module"}